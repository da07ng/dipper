// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.0beta2/esri/copyright.txt for details.
//>>built
require({cache:{"url:esri/views/3d/webgl-engine/materials/LeafCardMaterial.xml":'\x3c?xml version\x3d"1.0" encoding\x3d"UTF-8"?\x3e\r\n\r\n\x3csnippets\x3e\r\n\r\n\x3csnippet name\x3d"vertexShaderLeafCard"\x3e\r\n\t\x3c![CDATA[\r\n\tuniform mat4 proj;\r\n\tuniform mat4 view;\r\n\tuniform mat4 model;\r\n\tuniform mat4 modelNormal;\r\n\tattribute vec3 $position;\r\n\tattribute vec4 $normal;\r\n\tattribute vec4 $uv0;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tvarying float ambientLeaf;\r\n\r\n\tuniform float trafoScale;\r\n\tvarying vec3 vpos;\r\n\r\n\t// TODO optimize?\r\n\tvec2 rotate(vec2 pos, float angle) {\r\n\t\tfloat c \x3d cos(angle);\r\n\t\tfloat s \x3d sin(angle);\r\n\t\treturn vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);\r\n\t}\r\n\r\n\tvoid main(void) {\r\n\r\n\t\tvpos \x3d (model * vec4($position, 1.0)).xyz;\r\n\r\n\t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n\t\tvec2 uv01 \x3d floor($uv0.xy);\r\n\t\tvec2 uv \x3d $uv0.xy - uv01;\r\n\r\n   \t\tvec2 up \x3d rotate(vec2(1,0), $uv0.z);\r\n   \t\tvec3 xDir \x3d  vec3(up.x,up.y,0.0);\r\n   \t\tvec3 yDir \x3d  vec3(-up.y,up.x,0.0);\r\n\r\n\t\tpos +\x3d xDir * (uv01.x - .5) * $uv0.w *trafoScale;\r\n\t\tpos +\x3d yDir * (uv01.y - .5) * $uv0.w *trafoScale;;\r\n\t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n\t\tgl_Position \x3d pos4;\r\n\t\tvtc \x3d uv;\r\n\t\tambientLeaf \x3d normal.w;\r\n\t\tvnormal \x3d normalize((modelNormal * vec4($normal.xyz, 1.0)).xyz);\r\n\t}\r\n]]\x3e\r\n\x3c/snippet\x3e\r\n\r\n\x3csnippet name\x3d"fragmentShaderLeafCard"\x3e\r\n\x3c![CDATA[\r\n\tprecision mediump float;\r\n\r\n\tuniform vec3 camPos;\r\n\r\n\tuniform vec4 lightAmbient;\r\n\tuniform vec4 lightDiffuse;\r\n\tuniform vec4 lightSpecular;\r\n\tuniform vec3 lightDirection;\r\n\r\n\tuniform vec3 ambient;\r\n\tuniform vec3 diffuse;\r\n\tuniform vec3 specular;\r\n\tuniform float shininess;\r\n\r\n\tuniform sampler2D tex;\r\n\tvarying vec2 vtc;\r\n\tvarying vec3 vnormal;\r\n\tvarying float ambientLeaf;\r\n\r\n\tvarying vec3 vpos;\r\n\r\n\tvoid main() {\r\n\t\tvec4 texColor \x3d texture2D(tex, vtc);\r\n\t\tif (texColor.a \x3c .33) discard;\r\n\r\n\t\tvec3 a \x3d ambient * lightAmbient.rgb * lightAmbient.w;\r\n\t\tvec3 d \x3d diffuse * lightDiffuse.rgb * lightDiffuse.w * clamp(dot(vnormal, lightDirection), .0, 1.0);\r\n\r\n\t\tvec3 reflDir \x3d normalize(reflect(vpos - camPos, vnormal));\r\n\t\tfloat specDot \x3d max(dot(reflDir, lightDirection), .001);\r\n\t\tvec3 s \x3d specular * lightSpecular.rgb * lightSpecular.w * pow(specDot, shininess);\r\n\r\n\t\tgl_FragColor \x3d vec4(ambientLeaf * texColor.rgb * (a + d) + s, texColor.a);\r\n\r\n\t\t//gl_FragColor \x3d vec4(ambient,1.0);\r\n\r\n\t}\r\n]]\x3e\x3c/snippet\x3e\r\n\r\n\r\n\x3csnippet name\x3d"vertexShaderLeafCardDepth"\x3e\x3c![CDATA[\r\n   \tuniform mat4 proj;\r\n   \tuniform mat4 view;\r\n   \tuniform mat4 model;\r\n   \tuniform vec2 nearFar;\r\n\r\n   \tattribute vec3 $position;\r\n   \tattribute vec4 $uv0;\r\n\r\n   \tuniform float trafoScale;\r\n\r\n   \tvarying vec2 vtc;\r\n   \tvarying float depth;\r\n\r\n   \t// TODO optimize?\r\n   \tvec2 rotate(vec2 pos, float angle) {\r\n   \t\tfloat c \x3d cos(angle);\r\n   \t\tfloat s \x3d sin(angle);\r\n   \t\treturn vec2(c * pos.x - s * pos.y, s * pos.x + c * pos.y);\r\n   \t}\r\n\r\n   \tvoid main(void) {\r\n   \t\tvec3 pos \x3d (view * model * vec4($position, 1.0)).xyz;\r\n   \t\tvec2 uv01 \x3d floor($uv0.xy);\r\n   \t\tvec2 uv \x3d $uv0.xy - uv01;\r\n\r\n   \t\tvec2 up \x3d rotate(vec2(1,0), $uv0.z);\r\n   \t\tvec3 xDir \x3d  vec3(up.x,up.y,0.0);\r\n   \t\tvec3 yDir \x3d  vec3(-up.y,up.x,0.0);\r\n\r\n   \t\tpos +\x3d xDir * (uv01.x - .5) * $uv0.w*trafoScale;\r\n   \t\tpos +\x3d yDir * (uv01.y - .5) * $uv0.w*trafoScale;\r\n   \t\tvec4 pos4 \x3d proj * vec4(pos, 1.0);\r\n   \t\tgl_Position \x3d pos4;\r\n   \t\tvtc \x3d uv;\r\n\r\n   \t\tdepth \x3d (-pos.z - nearFar[0]) / (nearFar[1] - nearFar[0]);\r\n\r\n   \t}\r\n ]]\x3e\x3c/snippet\x3e\r\n\r\n\x3c/snippets\x3e'}});
define("dojo/text!./LeafCardMaterial.xml ./internal/MaterialUtil ../lib/VertexBufferLayout ../lib/GLSLProgram ../lib/GLSLShader ../lib/Util ../lib/gl-matrix".split(" "),function(O,y,P,I,J,M,s){var b=s.vec3,H=s.mat4,K=s.mat4d,L=M.VertexAttrConstants;s=function(z,m,r,d,g,f){function p(){return 2*Math.random()-1}y.basicMaterialConstructor(this,f);var c=new P([L.POSITION,L.NORMAL,L.UV0],[3,4,4]),B=c.getStride();this.getAmbient=function(){return m};this.getDiffuse=function(){return r};this.getSpecular=
function(){return d};this.getShininess=function(){return g};this.dispose=function(){};this.getTextureId=function(){return z};this.getOutputAmount=function(b){var n=0,d;for(d=0;d<b/6;d++)0===d%1&&(n+=6);b=n;for(d=n=0;d<b/6;d++)0===d%1&&(n+=6);return n*B};this.getVertexBufferLayout=function(){return c};this.reduce=function(d,n){for(var b=d.position,z=d.normal,e=d.uv0,a=[],c=[],f=[],g=0,p=0;p<b.length/6;p++)if(0===p%n)for(var B=0;6>B;B++)a[g]=b[6*p+B],c[g]=z[6*p+B],f[g]=e[6*p+B],g++;return{position:a,
normal:c,uv0:f}};this.fillInterleaved=function(d,n,z,c,e,a){c=y.fill;var f=this.reduce(d.faces.indices,1),f=this.reduce(f,1),g=this.getOutputAmount(d.faces.indices.position.length);M.assert(g===f.position.length*B);var m=f.position,r=f.normal,C=f.uv0,f=d.vertexAttr.position.data,E=d.vertexAttr.normal.data,w=d.vertexAttr.uv0.data,u=b.create();d=m.length/6;for(var g=a,x=b.createFrom(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),t=b.createFrom(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),
s=0;s<d;++s){for(var h=b.create(),q=b.create(),k=[100,100,-100,-100],v=b.create(),l=0;6>l;++l){var A=6*s+l,F=3*m[A],G=3*r[A],A=2*C[A];h[0]+=f[F+0];h[1]+=f[F+1];h[2]+=f[F+2];q[0]+=E[G+0];q[1]+=E[G+1];q[2]+=E[G+2];G=w[A+0];A=w[A+1];k[0]=Math.min(k[0],G);k[1]=Math.min(k[1],A);k[2]=Math.max(k[2],G);k[3]=Math.max(k[3],A);0===l&&b.set3(f[F+0],f[F+1],f[F+2],v)}h[0]/=6;h[1]/=6;h[2]/=6;q[0]/=6;q[1]/=6;q[2]/=6;h[0]+=0.1*p();h[1]+=0.1*p();h[2]+=0.1*p();void 0!==n&&(K.multiplyVec3(n,v,v),K.multiplyVec3(n,h,h),
K.multiplyVec3(z,q,q));b.add(h,u,u);b.max(x,h,x);b.min(t,h,t);k[0]+=0.01;k[1]+=0.01;k[2]-=0.01;k[3]-=0.01;for(l=0;4>l;l++)k[l]=Math.min(k[l],0.99999);l=2*Math.random()*Math.PI;v=1.41*b.dist(v,h);a+=c(h,0,e,a,void 0,3);a+=c(q,0,e,a,void 0,3);e[a++]=0;e[a++]=k[0];e[a++]=k[1];e[a++]=l;e[a++]=v;a+=c(h,0,e,a,void 0,3);a+=c(q,0,e,a,void 0,3);e[a++]=0;e[a++]=k[2]+1;e[a++]=k[1];e[a++]=l;e[a++]=v;a+=c(h,0,e,a,void 0,3);a+=c(q,0,e,a,void 0,3);e[a++]=0;e[a++]=k[2]+1;e[a++]=k[3]+1;e[a++]=l;e[a++]=v;a+=c(h,0,
e,a,void 0,3);a+=c(q,0,e,a,void 0,3);e[a++]=0;e[a++]=k[2]+1;e[a++]=k[3]+1;e[a++]=l;e[a++]=v;a+=c(h,0,e,a,void 0,3);a+=c(q,0,e,a,void 0,3);e[a++]=0;e[a++]=k[0];e[a++]=k[3]+1;e[a++]=l;e[a++]=v;a+=c(h,0,e,a,void 0,3);a+=c(q,0,e,a,void 0,3);e[a++]=0;e[a++]=k[0];e[a++]=k[1];e[a++]=l;e[a++]=v}u[0]/=d;u[1]/=d;u[2]/=d;n=b.create();b.add(x,t,n);b.scale(n,0.5,n);a=b.create();b.subtract(x,t,a);a[0]=Math.abs(a[0])/2;a[1]=Math.abs(a[1])/2;a[2]=Math.abs(a[2])/2;m=b.create(u);m[1]-=(x[1]-t[1])/3;x=b.create();t=
b.create();f=b.create();r=[b.create(),b.create(),b.create(),b.create()];u=[0,0,0,0];C=H.create();for(s=0;s<d;++s){b.set3(e[g],e[g+1],e[g+2],f);b.subtract(f,m,x);b.normalize(x,x);t=b.subtract(f,n,t);b.normalize(t,t);w=Math.abs(b.dot(t,[1,0,0]));l=Math.abs(b.dot(t,[0,1,0]));E=Math.abs(b.dot(t,[0,0,1]));w=w*Math.abs(n[0]-f[0])/a[0];w+=l*Math.abs(n[1]-f[1])/a[1];w+=E*Math.abs(n[2]-f[2])/a[2];for(l=0;4>l;l++)H.identity(C),H.rotate(C,0.8*p(),[0,1,0],C),H.rotate(C,0.8*p(),[1,0,0],C),H.multiplyVec3(C,x,r[l]),
u[l]=0.5+0.5*w-0.2*p();E=0.8+0.3*p();for(l=0;6>l;++l){var D;switch(l){case 0:D=0;break;case 1:D=1;break;case 2:D=2;break;case 3:D=2;break;case 4:D=3;break;case 5:D=0}g+=3;g+=c(r[D],0,e,g,z,3);e[g++]=u[D];g+=3;e[g++]*=E}}};this.intersect=function(){};this.getGLMaterials=function(){return[Q,R,void 0,N]};this.getAllTextureIds=function(){return[z]}};var Q=function(b,m,r){y.basicGLMaterialConstructor(this,b);var d=m.get("leafCard");y.singleTextureGLMaterialConstructor(this,r,{textureId:b.getTextureId()});
this.beginSlot=function(d){return 2===d};this.getProgram=function(){return d};var g=b.getAmbient(),f=b.getDiffuse(),p=b.getSpecular(),c=b.getShininess();this.bind=function(m,r){d.use();this.bindTexture(m,d);d.uniform3fv("ambient",g);d.uniform3fv("diffuse",f);d.uniform3fv("specular",p);d.uniform1f("shininess",c);d.uniform1f("trafoScale",1);b.getVertexBufferLayout().enableVertexAttribArrays(m,d)};this.release=function(f){b.getVertexBufferLayout().disableVertexAttribArrays(f,d)};this.bindView=function(b,
f){y.bindView(f.origin,f.view,d);y.bindCamPos(f.origin,f.viewInvTransp,d)};this.bindInstance=function(f,b){d.uniformMatrix4fv("model",b.transformation);d.uniformMatrix4fv("modelNormal",b.transformationNormal);var c=b.transformation,g=Math.sqrt(c[0]*c[0]+c[4]*c[4]+c[8]*c[8]),p=Math.sqrt(c[1]*c[1]+c[5]*c[5]+c[9]*c[9]),c=Math.sqrt(c[2]*c[2]+c[6]*c[6]+c[10]*c[10]);d.uniform1f("trafoScale",(g+p+c)/3)};this.getDrawMode=function(c){return c.TRIANGLES}},N=function(b,m,r,d){y.basicGLMaterialConstructor(this,
b);var g=null==d?m.get("leafCardDepth"):m.get("leafCardDepthShadowMap");y.singleTextureGLMaterialConstructor(this,r,{textureId:b.getTextureId()});this.beginSlot=function(b){return 2===b};this.getProgram=function(){return g};this.bind=function(d,p){g.use();this.bindTexture(d,g);g.uniform2fv("nearFar",p.nearFar);b.getVertexBufferLayout().enableVertexAttribArrays(d,g)};this.release=function(d){b.getVertexBufferLayout().disableVertexAttribArrays(d,g)};this.bindView=function(d,b){y.bindView(b.origin,b.view,
g)};this.bindInstance=function(d,b){g.uniformMatrix4fv("model",b.transformation);var c=b.transformation,m=Math.sqrt(c[0]*c[0]+c[4]*c[4]+c[8]*c[8]),z=Math.sqrt(c[1]*c[1]+c[5]*c[5]+c[9]*c[9]),c=Math.sqrt(c[2]*c[2]+c[6]*c[6]+c[10]*c[10]);g.uniform1f("trafoScale",(m+z+c)/3)};this.getDrawMode=function(b){return b.TRIANGLES}},R=function(b,m,r){N.call(this,b,m,r,!0)};s.loadShaders=function(b,m,r,d){b._parse(O);var g=new J(d.VERTEX_SHADER,b.vertexShaderLeafCard,d),f=new J(d.FRAGMENT_SHADER,b.fragmentShaderLeafCard,
d),g=new I([g,f],d);b=new J(d.VERTEX_SHADER,b.vertexShaderLeafCardDepth,d);f=m.get("fsDepthTextured");m=m.get("fsDepthTexturedShadowMap");f=new I([b,f],d);d=new I([b,m],d);r.add("leafCard",g);r.add("leafCardDepth",f);r.add("leafCardDepthShadowMap",d)};return s});