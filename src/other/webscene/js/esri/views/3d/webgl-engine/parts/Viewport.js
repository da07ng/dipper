// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See http://js.arcgis.com/4.0beta2/esri/copyright.txt for details.
//>>built
define("../lib/PerformanceTimer ../lib/Camera ../lib/Util ../lib/bitset ../lib/gl-matrix ./Visualizer".split(" "),function(w,B,c,C,m,D){var x=m.vec3,E=m.vec4d,L=m.mat4d;return function(n,m,F,G,f){function y(){var a=N;if(H||0<t){u[1]=0;var b=I,a=u;L.perspective(g.fovY,g.aspect,1,10,M);c.matrix2frustumPlanes(g.viewMatrix,M,e);b.clearAll();J=z=0;for(var d=-Number.MAX_VALUE,f=-Number.MAX_VALUE,m=e[0][0],n=e[0][1],q=e[0][2],r=e[0][3],s=e[1][0],w=e[1][1],x=e[1][2],y=e[1][3],B=e[2][0],C=e[2][1],D=e[2][2],
E=e[2][3],F=e[3][0],G=e[3][1],O=e[3][2],P=e[3][3],Q=e[4][0],R=e[4][1],S=e[4][2],T=e[4][3],U=e[5][3],K=0;K<p.length;K++){J++;var A=p[K];if(!A.material.isBackdrop){var h=A.center,k=h[0],l=h[1],v=h[2],h=A.bsRadius;if(m*k+n*l+q*v+r>h)continue;if(s*k+w*l+x*v+y>h)continue;if(B*k+C*l+D*v+E>h)continue;if(F*k+G*l+O*v+P>h)continue;l=Q*k+R*l+S*v;k=l+h;h=-l+h;k>d&&(d=k);h>f&&(f=h)}b.set(A.idx);z++}b=d!==-Number.MAX_VALUE;d+=T;f+=U;0<z&&b&&(a[0]=0.99*Math.max(1-d,2),a[1]=1.01*Math.max(10+f,a[0]+1));0<t&&0<u[1]&&
(g.far=u[1],g.near=Math.max(u[0],g.far/t));a=I}return a}var d=new D(n,m,F,G,f),g=new B(x.createFrom(0,100,-100),x.createFrom(0,0,0)),p=[],I=new C,N={get:function(){return!0}},H=!0,t=2E4,u=[0,0],J=0,z=0,s=new w(10),q=new w(10),r=!0;this.getCombinedStats=function(){var a=d.getCombinedStats();a.renderGeometriesTotal=J;a.renderGeometriesVisible=z;a.visualizerTotalRenderTime=s.getTotal();a.visualizerCurrentRenderTime=s.getLastFiltered();a.viewportTotalRenderTime=q.getTotal();a.viewportCurrentRenderTime=
q.getLastFiltered();a.totalNumFramesRendered=q.getNumMeasurements();void 0!==f.getUsedTextureMemory&&(a.textureMemory=f.getUsedTextureMemory());void 0!==f.getUsedRenderbufferMemory&&(a.renderbufferMemory=f.getUsedRenderbufferMemory());void 0!==f.getUsedVBOMemory&&(a.VBOMemory=f.getUsedVBOMemory());if(void 0!==f.getUsedTextureMemoryStats){var b=f.getUsedTextureMemoryStats(),c;for(c in b)a["texMem type: "+c]=b[c]}return a};var M=L.create(),e=Array(6);for(n=0;6>n;++n)e[n]=E.create();this.dispose=function(){d.dispose();
d=null};this.setLightingData=function(a){d.setLightingData(a)};this.getLightingData=function(){return d.getLightingData()};this.getViewParams=function(a){var b=d.getViewParams(a);c.assert(void 0!==a&&void 0===a.eye,"getViewParams: getting the eye through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.center,"getViewParams: getting the center through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.up,"getViewParams: getting the up through getViewParams is deprecated, use the camera instead");
c.assert(void 0!==a&&void 0===a.viewMatrix,"getViewParams: getting the viewMatrix through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.angleOfElevation,"getViewParams: getting the angleOfElevation through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.direction,"getViewParams: getting the direction through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.fov,"getViewParams: getting the fov through getViewParams is deprecated, use the camera instead");
c.assert(void 0!==a&&void 0===a.fovX,"getViewParams: getting the fovX through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.viewport,"getViewParams: getting the viewport through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.projectionMatrix,"getViewParams: getting the projectionMatrix through getViewParams is deprecated, use the camera instead");c.assert(void 0!==a&&void 0===a.frustum,"getViewParams: getting the frustum through getViewParams is deprecated, use the camera instead");
if(!a||a.viewMode)b.viewMode=this.getMode();if(!a||a.frustumCullingEnabled)b.frustumCullingEnabled=H;if(!a||a.maxFarNearRatio)b.maxFarNearRatio=t;return b};this.setViewParams=function(a){c.assert(void 0===a.eye,"setViewParams: can't set eye through setViewParams anymore, manipulate camera directly instead");c.assert(void 0===a.center,"setViewParams: can't set center through setViewParams anymore, manipulate camera directly instead");c.assert(void 0===a.direction,"setViewParams: can't set direction through setViewParams anymore, manipulate camera directly instead");
c.assert(void 0===a.distance,"setViewParams: can't set distance through setViewParams anymore, manipulate camera directly instead");void 0!==a.viewMatrix&&c.assert(!1,"setViewParams: can't set view matrix directly");c.assert(void 0===a.fovX,"setViewParams: can't set fovX through setViewParams anymore, manipulate camera directly instead");c.assert(void 0===a.fov,"setViewParams: can't set fov through setViewParams anymore, manipulate camera directly instead");c.assert(void 0===a.nearFar,"setViewParams: can't set nearFar through setViewParams anymore, manipulate camera directly instead");
void 0!==a.viewport&&c.assert(!1,"setViewParams: can't set viewport rectangle directly");void 0!==a.frustum&&c.assert(!1,"setViewParams: can't set frustum directly");void 0!==a.projectionMatrix&&c.assert(!1,"setViewParams: can't set projection matrix directly");void 0!==a.viewMode&&this.setMode(a.viewMode);void 0!==a.frustumCullingEnabled&&(H=a.frustumCullingEnabled);void 0!==a.maxFarNearRatio&&(t=-1===a.maxFarNearRatio?2E4:a.maxFarNearRatio);d.setViewParams(a);r=!0};this.setRenderParams=function(a){d.setRenderParams(a)};
this.getRenderParams=function(){return d.getRenderParams()};this.getFrustumObjects=function(){for(var a={},b=0;b<p.length;b++)I.get(p[b].idx)&&(a[p[b].name]=1);return a};this.modify=function(a,b,c,e,f){d.modify(a,b,c,e,f);p=d.getContent()};this.getContent=function(){return p};this.setSelectionObject=function(a,b){d.setSelectionObject(a,b)};this.setHighlightObjects=function(a,b){d.setHighlightObjects(a,b)};this.frame=function(a,b){g.frame(a,b);r=!0};this.setCamera=function(a){g.copyFrom(a);y();r=!0};
this.getCamera=function(){return g};this.getPickRay=function(a,b,d){return this.pickRayWithBeginPoint(a,void 0,g.viewMatrix,b,d)};this.pickRayWithBeginPoint=function(a,b,c,e,f){return d.getPickRay(a,b,g,c,e,f)};this.getSideIndexForPoint=function(a){return d.getSideIndexForPoint(a,g.viewport)};this.addExternalRenderer=function(a,b){return d.addExternalRenderer(a,b)};this.removeExternalRenderer=function(a,b){return d.removeExternalRenderer(a,b)};this.getExternalRenderers=function(){return d.getExternalRenderers()};
this.render=function(a,b){q.start();var c=y();s.start();d.render(g,a,c,b);s.stop();q.stop()};this.resetNeedsRender=function(){r=!1;d.resetNeedsRender()};this.needsRender=function(){return r||d.needsRender()};this._getModule=function(a){return"visualizer"===a?d:d._getModule(a)}}});